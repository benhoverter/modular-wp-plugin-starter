!function(a){"use strict";jQuery(document).ready(function(){console.log("Module's view-name.js loaded.")})}(),function(o){"use strict";o(document).ready(function(){function a(){o("#button-id").click(function(a){a.preventDefault();o(this);if(!0===confirm("Are you sure you want to do that?")){o("");o.ajax({method:"POST",url:plugin_abbrev_public_ajax_data.ajax_url,data:{action:"action_name",ajax_nonce:data_package_name.module_ajax_data_nonce,data_1:"Your data here.",data_2:"Your data here, too."},beforeSend:function(){var a=o("#outer-frame-id").height();o("#outer-frame-id").height(a),o("#frame-id").fadeOut("fast")},success:function(a,e,t){o("#frame-id").html(a),o("#frame-id").fadeIn("fast"),o("#outer-frame-id").css("height","auto"),o(document.body).trigger("post-load")}})}})}console.log("Module-Ajax's view-name.js loaded."),a(),o(document.body).on("post-load",function(){a()})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS9qcy92aWV3LW5hbWUuanMiLCJtb2R1bGUtYWpheC9qcy92aWV3LW5hbWUuanMiXSwibmFtZXMiOlsiJCIsImpRdWVyeSIsImRvY3VtZW50IiwicmVhZHkiLCJjb25zb2xlIiwibG9nIiwiYmluZEhhbmRsZXIiLCJjbGljayIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ0aGlzIiwiY29uZmlybSIsImFqYXgiLCJtZXRob2QiLCJ1cmwiLCJwbHVnaW5fYWJicmV2X3B1YmxpY19hamF4X2RhdGEiLCJhamF4X3VybCIsImRhdGEiLCJhY3Rpb24iLCJhamF4X25vbmNlIiwiZGF0YV9wYWNrYWdlX25hbWUiLCJtb2R1bGVfYWpheF9kYXRhX25vbmNlIiwiZGF0YV8xIiwiZGF0YV8yIiwiYmVmb3JlU2VuZCIsInJlZ0hlaWdodCIsImhlaWdodCIsImZhZGVPdXQiLCJzdWNjZXNzIiwiaHRtbCIsInN0YXR1cyIsImpxWEhSIiwiZmFkZUluIiwiY3NzIiwiYm9keSIsInRyaWdnZXIiLCJvbiJdLCJtYXBwaW5ncyI6IkNBVUEsU0FBQUEsR0FDQSxhQVNBQyxPQVBBQyxVQUFBQyxNQUFBLFdBQ0FDLFFBQUFDLElBQUEsbUNBSkEsR0NEQSxTQUFBTCxHQUVBLGFBRUFBLEVBQUFFLFVBQUFDLE1BQUEsV0FnQkEsU0FBQUcsSUFDQU4sRUFBQSxjQUFBTyxNQUFBLFNBQUFDLEdBRUFBLEVBQUFDLGlCQUVBVCxFQUFBVSxNQU1BLElBQUEsSUFGQUMsUUFBQSxxQ0FFQSxDQUtBWCxFQUFBLElBZUFBLEVBQUFZLEtBQUEsQ0FDQUMsT0FBQSxPQUNBQyxJQUFBQywrQkFBQUMsU0FDQUMsS0FDQSxDQUNBQyxPQUFBLGNBQ0FDLFdBQUFDLGtCQUFBQyx1QkFDQUMsT0FBQSxrQkFDQUMsT0FBQSx3QkFHQUMsV0FBQSxXQUdBLElBQUFDLEVBQUF6QixFQUFBLG1CQUFBMEIsU0FHQTFCLEVBQUEsbUJBQUEwQixPQUFBRCxHQUdBekIsRUFBQSxhQUFBMkIsUUFBQSxTQUlBQyxRQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBTUEvQixFQUFBLGFBQUE2QixLQUFBQSxHQUNBN0IsRUFBQSxhQUFBZ0MsT0FBQSxRQUdBaEMsRUFBQSxtQkFBQWlDLElBQUEsU0FBQSxRQUdBakMsRUFBQUUsU0FBQWdDLE1BQUFDLFFBQUEsbUJBbEZBL0IsUUFBQUMsSUFBQSxzQ0FLQUMsSUFHQU4sRUFBQUUsU0FBQWdDLE1BQUFFLEdBQUEsWUFBQSxXQUNBOUIsUUFmQSxDQWlHQUwiLCJmaWxlIjoicHVibGljLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBKUyBmb3I6IHB1YmxpYy9tb2R1bGUvdmlld3Mvdmlldy1uYW1lLnBocC5cclxuICpcclxuICogQGxpbmsgICAgICAgaHR0cDovL2V4YW1wbGUuY29tXHJcbiAqIEBzaW5jZSAgICAgIDEuMC4wXHJcbiAqXHJcbiAqIEBwYWNrYWdlICAgIHBsdWdpbi1uYW1lXHJcbiAqIEBzdWJwYWNrYWdlIHBsdWdpbi1uYW1lL3B1YmxpYy9tb2R1bGUvanNcclxuICovXHJcblxyXG4oZnVuY3Rpb24oICQgKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCBcIk1vZHVsZSdzIHZpZXctbmFtZS5qcyBsb2FkZWQuXCIgKTtcclxuXHJcbiAgICAgICAgLy8gRG8gdGhlIHRoaW5nLlxyXG5cclxuICAgIH0pO1xyXG5cclxufSkoIGpRdWVyeSApO1xyXG4iLCIvKipcclxuICogSlMgZm9yOiBwdWJsaWMvbW9kdWxlLWFqYXgvdmlld3Mvdmlldy1uYW1lLnBocC5cclxuICpcclxuICogQGxpbmsgICAgICAgaHR0cDovL2V4YW1wbGUuY29tXHJcbiAqIEBzaW5jZSAgICAgIDEuMC4wXHJcbiAqXHJcbiAqIEBwYWNrYWdlICAgIHBsdWdpbi1uYW1lXHJcbiAqIEBzdWJwYWNrYWdlIHBsdWdpbi1uYW1lL3B1YmxpYy9tb2R1bGUtYWpheC9qc1xyXG4gKi9cclxuKCBmdW5jdGlvbigkKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICQoIGRvY3VtZW50ICkucmVhZHkoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyggXCJNb2R1bGUtQWpheCdzIHZpZXctbmFtZS5qcyBsb2FkZWQuXCIgKTtcclxuXHJcbiAgICAgICAgLy8gRG8gdGhlIHRoaW5nLlxyXG5cclxuICAgICAgICAvLyBCaW5kIHRoZSBldmVudCBoYW5kbGVyIHRvIHRoZSBkZWxldGUgYnV0dG9uOlxyXG4gICAgICAgIGJpbmRIYW5kbGVyKCk7XHJcblxyXG4gICAgICAgIC8vIFJlYmluZCBhbGwgaGFuZGxlcnMgb24gQWpheCBmaW5pc2g6XHJcbiAgICAgICAgJCggZG9jdW1lbnQuYm9keSApLm9uKCAncG9zdC1sb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGJpbmRIYW5kbGVyKCk7XHJcbiAgICAgICAgfSApO1xyXG5cclxuXHJcbiAgICAgICAgLy8gSGFuZGxlci1iaW5kZXIgZm9yIGEgYnV0dG9uOlxyXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRIYW5kbGVyKCkge1xyXG4gICAgICAgICAgICAkKCAnI2J1dHRvbi1pZCcgKS5jbGljayggZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNlbGVjdCB0aGUgaHRtbCB5b3UgbmVlZCBvbiBldmVudCBoZXJlLlxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjb25maXJtZWQgPSBjb25maXJtKCBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkbyB0aGF0P1wiICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBjb25maXJtZWQgPT09IHRydWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coIFwiQ2xpY2sgY29uZmlybWVkLlwiICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBodG1sIHRvIHBhc3MgdG8gdGhlIEFKQVggY2FsbGJhY2sgaGVyZS5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWpheElucHV0ID0gJCggXCJcIiApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBBamF4IGNhbGw6XHJcbiAgICAgICAgICAgICAgICAgICAgYWpheEZ1bmN0aW9uKCBhamF4SW5wdXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggXCJhamF4SW5wdXQgaXMgXCIgKyBhamF4SW5wdXQgKyBcIi5cIiApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAvLyBFTkQgT0Y6IGJpbmRIYW5kbGVyKCkuXHJcblxyXG5cclxuICAgICAgICAvLyBEZWZpbmUgYW4gYWpheCBmdW5jdGlvbjpcclxuICAgICAgICBmdW5jdGlvbiBhamF4RnVuY3Rpb24oIGFqYXhJbnB1dCApIHtcclxuXHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIHVybDogcGx1Z2luX2FiYnJldl9wdWJsaWNfYWpheF9kYXRhLmFqYXhfdXJsLCAvLyBHcmFiIHRoZSB1cmwgZnJvbSB0aGUgUEhQIGFqYXggZGF0YSBvYmplY3QuXHJcbiAgICAgICAgICAgICAgICBkYXRhOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhY3Rpb25fbmFtZScsICAvLyBTYW1lIGFzIGluIHdwX2FqYXhfe2FjdGlvbl9uYW1lfSgpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhamF4X25vbmNlOiBkYXRhX3BhY2thZ2VfbmFtZS5tb2R1bGVfYWpheF9kYXRhX25vbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhXzE6IFwiWW91ciBkYXRhIGhlcmUuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfMjogXCJZb3VyIGRhdGEgaGVyZSwgdG9vLlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgaGVpZ2h0IG9mICNjdXJyZW50LXVzZXItcmVnaXN0cmF0aW9uLWluZm8uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ0hlaWdodCA9ICQoICcjb3V0ZXItZnJhbWUtaWQnICkuaGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgQ1NTIGhlaWdodCB0byB0aGF0IHZhbHVlIHRvIHByZXNlcnZlIGVsZW1lbnQgcG9zaXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgJCggJyNvdXRlci1mcmFtZS1pZCcgKS5oZWlnaHQoIHJlZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV0dHkgZmFkZSBvdXQuXHJcbiAgICAgICAgICAgICAgICAgICAgJCggJyNmcmFtZS1pZCcgKS5mYWRlT3V0KCAnZmFzdCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCBodG1sLCBzdGF0dXMsIGpxWEhSICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCBcIkFKQVggcmV0dXJuZWQgSFRNTCBvZjogXCIgKyBodG1sICk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggXCJBSkFYIHJldHVybmVkIGEgc3RhdHVzIG9mOiBcIiArIHN0YXR1cyArIFwiLlwiICk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggXCJBSkFYIHJldHVybmVkIGEganFYSFIgb2JqZWN0IG9mOiBcIiArIGpxWEhSICsgXCIuXCIgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCggJyNmcmFtZS1pZCcgKS5odG1sKCBodG1sICk7IC8vIFVzZSB0aGUgQUpBWCByZXR1cm4gdmFsdWUgYXMgdGhlIEhUTUwgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICQoICcjZnJhbWUtaWQnICkuZmFkZUluKCAnZmFzdCcgKTsgLy8gUHJldHR5IGZhZGUgaW4uXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBDU1MgaGVpZ2h0IG9mICNjdXJyZW50LXVzZXItcmVnaXN0cmF0aW9uLWluZm8gYmFjayB0byBhdXRvLlxyXG4gICAgICAgICAgICAgICAgICAgICQoICcjb3V0ZXItZnJhbWUtaWQnICkuY3NzKCAnaGVpZ2h0JywgJ2F1dG8nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0YW5kYXJkIGZvciBXUCBBUEksIGFuZCBqdXN0IGhhbmR5OlxyXG4gICAgICAgICAgICAgICAgICAgICQoIGRvY3VtZW50LmJvZHkgKS50cmlnZ2VyKCAncG9zdC1sb2FkJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7IC8vIEVORCBPRjogJC5hamF4KCkuXHJcblxyXG4gICAgICAgIH0gLy8gRU5EIE9GOiBhamF4RnVuY3Rpb24oKS5cclxuXHJcbiAgICB9KTsgLy8gRU5EIE9GOiAkKCBkb2N1bWVudCApLnJlYWR5KCBmdW5jdGlvbigpIHtcclxuXHJcbn0pKGpRdWVyeSk7XHJcbiJdfQ==
