!function(e){"use strict";jQuery(document).ready(function(){console.log("Module's view-name.js loaded.")})}(),function(e){"use strict";jQuery(document).ready(function(){console.log("Settings view-name.js loaded.")})}(),function(s){"use strict";s(document).ready(function(){function e(){s("#button-id").click(function(e){e.preventDefault();s(this);if(!0===confirm("Are you sure you want to do that?")){s("");s.ajax({method:"POST",url:ajaxurl,data:{action:"action_name",ajax_nonce:data_package_name.module_ajax_data_nonce,data_1:"Your data here.",data_2:"Your data here, too."},beforeSend:function(){var e=s("#outer-frame-id").height();s("#outer-frame-id").height(e),s("#frame-id").fadeOut("fast")},success:function(e,a,t){s("#frame-id").html(e),s("#frame-id").fadeIn("fast"),s("#outer-frame-id").css("height","auto"),s(document.body).trigger("post-load")}})}})}console.log("Module-Ajax's view-name.js loaded."),e(),s(document.body).on("post-load",function(){e()});var a,t=s("#event-materials-table input");function o(e){var a=e.serialize();sessionStorage.setItem("sessionMats",a)}o(t),(a=t).off("keyup",".event_materials"),a.keyup(function(e){9!==e&&function(e){var a=e.parents("table").first().find("input");a=a.serialize();var t=sessionStorage.getItem("sessionMats"),n=s(e).parents(".inside").first().find("#event-materials-save a.button");a===t?function(e){e.removeClass("ready").removeAttr("href").off("click")}(n):function(e){e.addClass("ready").attr("href","#"),e.off("click"),e.click(function(e){e.preventDefault();var a=s(this).parents(".inside").first().find("table");!function(n){var e=s(n).find("input").serialize();s.ajax({method:"POST",url:ajaxurl,cache:!1,data:{action:"ce_admin",ajax_nonce:ce_admin_ajax_data.ajax_nonce,event_materials:e},beforeSend:function(){s("#event-materials-save-result span").fadeOut("fast")},success:function(e,a,t){s("#event-materials-save-result span").html(e).fadeIn("fast"),s("#event-materials #event-materials-save a.button").removeClass("ready").removeAttr("href").off("click"),o(n),s(document.body).trigger("post-load")},error:function(e,a,t){s("#event-materials-save-result span").html("Sorry, unable to save.").fadeIn("fast")}})}(a)})}(n)}(a)}),a.addClass("listening")})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
